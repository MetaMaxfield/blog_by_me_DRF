--
-- PostgreSQL database dump
--

-- Dumped from database version 16.9 (Ubuntu 16.9-0ubuntu0.24.04.1)
-- Dumped by pg_dump version 16.9 (Ubuntu 16.9-0ubuntu0.24.04.1)

-- Started on 2025-07-04 13:38:07 +04

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 222 (class 1259 OID 16693)
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 16692)
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 224 (class 1259 OID 16701)
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- TOC entry 223 (class 1259 OID 16700)
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 220 (class 1259 OID 16687)
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 16686)
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 228 (class 1259 OID 16743)
-- Name: users_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users_user_groups (
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.users_user_groups OWNER TO postgres;

--
-- TOC entry 227 (class 1259 OID 16742)
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.users_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 226 (class 1259 OID 16733)
-- Name: users_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users_user (
    id bigint NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL,
    birthday date,
    description text NOT NULL,
    image character varying(100),
    user_rating integer NOT NULL,
    description_en text,
    description_ru text
);


ALTER TABLE public.users_user OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 16732)
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.users_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 230 (class 1259 OID 16749)
-- Name: users_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users_user_user_permissions (
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.users_user_user_permissions OWNER TO postgres;

--
-- TOC entry 229 (class 1259 OID 16748)
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.users_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 238 (class 1259 OID 16839)
-- Name: blog_category; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blog_category (
    id bigint NOT NULL,
    name character varying(150) NOT NULL,
    description text NOT NULL,
    url character varying(160) NOT NULL,
    description_en text,
    description_ru text,
    name_en character varying(150),
    name_ru character varying(150)
);


ALTER TABLE public.blog_category OWNER TO postgres;

--
-- TOC entry 237 (class 1259 OID 16838)
-- Name: blog_category_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.blog_category ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.blog_category_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 248 (class 1259 OID 16886)
-- Name: blog_comment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blog_comment (
    id bigint NOT NULL,
    name character varying(80) NOT NULL,
    email character varying(254) NOT NULL,
    text text NOT NULL,
    created timestamp with time zone NOT NULL,
    updated timestamp with time zone NOT NULL,
    active boolean NOT NULL,
    parent_id bigint,
    post_id bigint NOT NULL
);


ALTER TABLE public.blog_comment OWNER TO postgres;

--
-- TOC entry 247 (class 1259 OID 16885)
-- Name: blog_comment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.blog_comment ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.blog_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 240 (class 1259 OID 16849)
-- Name: blog_mark; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blog_mark (
    id bigint NOT NULL,
    nomination character varying(10) NOT NULL,
    value smallint NOT NULL,
    nomination_en character varying(10),
    nomination_ru character varying(10)
);


ALTER TABLE public.blog_mark OWNER TO postgres;

--
-- TOC entry 239 (class 1259 OID 16848)
-- Name: blog_mark_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.blog_mark ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.blog_mark_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 242 (class 1259 OID 16855)
-- Name: blog_post; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blog_post (
    id bigint NOT NULL,
    title character varying(250) NOT NULL,
    url character varying(25) NOT NULL,
    body text NOT NULL,
    image character varying(100) NOT NULL,
    publish timestamp with time zone NOT NULL,
    created timestamp with time zone NOT NULL,
    updated timestamp with time zone NOT NULL,
    draft boolean NOT NULL,
    category_id bigint,
    video_id bigint,
    author_id bigint,
    body_en text,
    body_ru text,
    title_en character varying(250),
    title_ru character varying(250)
);


ALTER TABLE public.blog_post OWNER TO postgres;

--
-- TOC entry 241 (class 1259 OID 16854)
-- Name: blog_post_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.blog_post ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.blog_post_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 246 (class 1259 OID 16873)
-- Name: blog_rating; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blog_rating (
    id bigint NOT NULL,
    ip character varying(15) NOT NULL,
    mark_id bigint NOT NULL,
    post_id bigint NOT NULL
);


ALTER TABLE public.blog_rating OWNER TO postgres;

--
-- TOC entry 245 (class 1259 OID 16872)
-- Name: blog_rating_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.blog_rating ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.blog_rating_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 244 (class 1259 OID 16865)
-- Name: blog_video; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blog_video (
    id bigint NOT NULL,
    title character varying(100) NOT NULL,
    description text NOT NULL,
    file character varying(100) NOT NULL,
    create_at timestamp with time zone NOT NULL,
    description_en text,
    description_ru text,
    title_en character varying(100),
    title_ru character varying(100)
);


ALTER TABLE public.blog_video OWNER TO postgres;

--
-- TOC entry 243 (class 1259 OID 16864)
-- Name: blog_video_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.blog_video ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.blog_video_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 250 (class 1259 OID 16933)
-- Name: company_about; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.company_about (
    id bigint NOT NULL,
    description text,
    email_contact character varying(254),
    phone1_num character varying(128),
    phone2_num character varying(128),
    address character varying,
    latitude numeric(9,6),
    longitude numeric(9,6),
    description_en text,
    description_ru text
);


ALTER TABLE public.company_about OWNER TO postgres;

--
-- TOC entry 249 (class 1259 OID 16932)
-- Name: company_about_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.company_about ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.company_about_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 252 (class 1259 OID 16941)
-- Name: company_contact; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.company_contact (
    id bigint NOT NULL,
    name character varying NOT NULL,
    email character varying(254) NOT NULL,
    phone character varying(128) NOT NULL,
    message text NOT NULL,
    date timestamp with time zone NOT NULL,
    feedback boolean NOT NULL
);


ALTER TABLE public.company_contact OWNER TO postgres;

--
-- TOC entry 251 (class 1259 OID 16940)
-- Name: company_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.company_contact ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.company_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 232 (class 1259 OID 16784)
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id bigint NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- TOC entry 231 (class 1259 OID 16783)
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 218 (class 1259 OID 16679)
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 16678)
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 216 (class 1259 OID 16671)
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- TOC entry 215 (class 1259 OID 16670)
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 253 (class 1259 OID 16948)
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- TOC entry 234 (class 1259 OID 16805)
-- Name: taggit_tag; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.taggit_tag (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    slug character varying(100) NOT NULL
);


ALTER TABLE public.taggit_tag OWNER TO postgres;

--
-- TOC entry 233 (class 1259 OID 16804)
-- Name: taggit_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.taggit_tag ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.taggit_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 236 (class 1259 OID 16815)
-- Name: taggit_taggeditem; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.taggit_taggeditem (
    id integer NOT NULL,
    object_id integer NOT NULL,
    content_type_id integer NOT NULL,
    tag_id integer NOT NULL
);


ALTER TABLE public.taggit_taggeditem OWNER TO postgres;

--
-- TOC entry 235 (class 1259 OID 16814)
-- Name: taggit_taggeditem_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.taggit_taggeditem ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.taggit_taggeditem_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 3608 (class 0 OID 16693)
-- Dependencies: 222
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
1	Автор
2	Модератор
\.


--
-- TOC entry 3610 (class 0 OID 16701)
-- Dependencies: 224
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
1	1	29
2	1	30
3	1	32
4	1	52
5	1	37
6	1	39
7	1	38
8	1	40
9	1	48
10	1	41
11	1	43
12	1	42
13	1	44
14	1	60
15	1	21
16	1	24
17	1	25
18	1	28
19	2	29
20	2	31
21	2	30
22	2	32
23	2	49
24	2	51
25	2	50
26	2	52
27	2	37
28	2	39
29	2	38
30	2	40
31	2	48
32	2	41
33	2	43
34	2	42
35	2	44
36	2	60
37	2	59
38	2	53
39	2	55
40	2	54
41	2	56
42	2	21
43	2	23
44	2	22
45	2	24
46	2	25
47	2	27
48	2	26
49	2	28
50	1	62
51	2	64
\.


--
-- TOC entry 3606 (class 0 OID 16687)
-- Dependencies: 220
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add content type	4	add_contenttype
14	Can change content type	4	change_contenttype
15	Can delete content type	4	delete_contenttype
16	Can view content type	4	view_contenttype
17	Can add session	5	add_session
18	Can change session	5	change_session
19	Can delete session	5	delete_session
20	Can view session	5	view_session
21	Can add tag	6	add_tag
22	Can change tag	6	change_tag
23	Can delete tag	6	delete_tag
24	Can view tag	6	view_tag
25	Can add tagged item	7	add_taggeditem
26	Can change tagged item	7	change_taggeditem
27	Can delete tagged item	7	delete_taggeditem
28	Can view tagged item	7	view_taggeditem
29	Can add Категория	8	add_category
30	Can change Категория	8	change_category
31	Can delete Категория	8	delete_category
32	Can view Категория	8	view_category
33	Can add Значение рейтинга	9	add_mark
34	Can change Значение рейтинга	9	change_mark
35	Can delete Значение рейтинга	9	delete_mark
36	Can view Значение рейтинга	9	view_mark
37	Can add Пост	10	add_post
38	Can change Пост	10	change_post
39	Can delete Пост	10	delete_post
40	Can view Пост	10	view_post
41	Can add Видеозапись	11	add_video
42	Can change Видеозапись	11	change_video
43	Can delete Видеозапись	11	delete_video
44	Can view Видеозапись	11	view_video
45	Can add Рейтинг	12	add_rating
46	Can change Рейтинг	12	change_rating
47	Can delete Рейтинг	12	delete_rating
48	Can view Рейтинг	12	view_rating
49	Can add Комментарий	13	add_comment
50	Can change Комментарий	13	change_comment
51	Can delete Комментарий	13	delete_comment
52	Can view Комментарий	13	view_comment
53	Can add Содержание страницы "О нас"	14	add_about
54	Can change Содержание страницы "О нас"	14	change_about
55	Can delete Содержание страницы "О нас"	14	delete_about
56	Can view Содержание страницы "О нас"	14	view_about
57	Can add Запрос от пользователя блога	15	add_contact
58	Can change Запрос от пользователя блога	15	change_contact
59	Can delete Запрос от пользователя блога	15	delete_contact
60	Can view Запрос от пользователя блога	15	view_contact
61	Can add Пользователь	16	add_user
62	Can change Пользователь	16	change_user
63	Can delete Пользователь	16	delete_user
64	Can view Пользователь	16	view_user
\.


--
-- TOC entry 3624 (class 0 OID 16839)
-- Dependencies: 238
-- Data for Name: blog_category; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.blog_category (id, name, description, url, description_en, description_ru, name_en, name_ru) FROM stdin;
4	Здоровье	Категория с правильным отношением к здоровью.	zdorove	\N	Категория с правильным отношением к здоровью.	\N	Здоровье
1	Наука	Образовательный контент.	nauka	\N	Образовательный контент.	\N	Наука
2	Развлечения	Развлекательный контент.	razvlecheniya	\N	Развлекательный контент.	\N	Развлечения
3	Спорт	Все о спорте.	sport	\N	Все о спорте.	\N	Спорт
\.


--
-- TOC entry 3634 (class 0 OID 16886)
-- Dependencies: 248
-- Data for Name: blog_comment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.blog_comment (id, name, email, text, created, updated, active, parent_id, post_id) FROM stdin;
1	Maximus	maximus@mail.com	Nice first post!	2025-06-22 14:52:44.366507+04	2025-06-22 14:52:44.366553+04	t	\N	5
2	The Creator	creator@gmail.com	Thanx!	2025-06-22 14:53:41.884408+04	2025-06-22 14:53:41.884436+04	t	1	3
\.


--
-- TOC entry 3626 (class 0 OID 16849)
-- Dependencies: 240
-- Data for Name: blog_mark; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.blog_mark (id, nomination, value, nomination_en, nomination_ru) FROM stdin;
1	Лайк	1	\N	Лайк
2	Дизлайк	-1	\N	Дизлайк
\.


--
-- TOC entry 3628 (class 0 OID 16855)
-- Dependencies: 242
-- Data for Name: blog_post; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.blog_post (id, title, url, body, image, publish, created, updated, draft, category_id, video_id, author_id, body_en, body_ru, title_en, title_ru) FROM stdin;
3	Вред фастфуда	vred-fastfuda	<p>В этой пище почти нет клетчатки, а значит, она застаивается в кишечнике, бродит и гниет там, приводит к вздутию живота, дискомфорту в животе, способствует запорам. Кроме того, нарушается всасывание витаминов и железа &ndash; это приводит к анемии и снижению иммунитета.</p>	posts/a6cd60e0b03183674982d83a7857ed6c26d4f6cb.jpg	2025-06-22 14:45:56.509984+04	2025-06-22 14:45:56.51043+04	2025-06-22 14:49:56.296747+04	f	4	\N	3	<p>There is almost no fiber in this food, which means it stagnates in the intestines, ferments and rots there, leads to bloating, abdominal discomfort, and contributes to constipation. In addition, the absorption of vitamins and iron is disrupted - this leads to anemia and decreased immunity.</p>	<p>В этой пище почти нет клетчатки, а значит, она застаивается в кишечнике, бродит и гниет там, приводит к вздутию живота, дискомфорту в животе, способствует запорам. Кроме того, нарушается всасывание витаминов и железа &ndash; это приводит к анемии и снижению иммунитета.</p>	The harm of fast food	Вред фастфуда
2	Django ORM	django-orm	<p>Django ORM (Object Relational Mapping) &ndash; одна из самых мощных функций Django. Благодаря ей мы можем взаимодействовать с базой данных, используя код Python вместо SQL.</p>\r\n\r\n<p>Использование ORM дает несколько преимуществ:</p>\r\n\r\n<p>1) Благодаря ORM у нас есть миграция: мы можем легко изменять наши таблицы, обновлять наши модели, и Django автоматически сгенерирует сценарии миграции, необходимый для обновления таблиц базы данных.</p>\r\n\r\n<p>2) Есть транзакции: мы можем делать несколько обновлений базы данных в рамках транзакции и, если что-то не получится, легко откатиться до того состояния, которое было при запуске.</p>\r\n\r\n<p>Но также у ORM есть некоторые недостатки:</p>\r\n\r\n<p>1) Поскольку это абстракция поверх SQL, то мы не всегда знаем точно, какие SQL-запросы будут генерироваться из нашего кода Python.</p>\r\n\r\n<p>2) Django не может угадать, когда нам нужно использовать связанную таблицу, поэтому она не будет выполнять JOINs для нас, когда они нам нужны.</p>\r\n\r\n<p>3) ORM дает нам неверное ощущение легкости, и мы не всегда понимаем то, что мы делаем, что может создавать большую нагрузку на сервер. У нас нет простого способа узнать, что доступ к атрибуту в объекте может вызвать дополнительный запрос к базе данных, который можно было бы предотвратить с помощью JOIN.</p>	posts/django_p.jpg	2025-06-22 14:45:56.5056+04	2025-06-22 14:45:56.506368+04	2025-06-22 14:50:58.931748+04	f	1	\N	2	<p>Django ORM (Object Relational Mapping) is one of the most powerful features of Django. It allows us to interact with the database using Python code instead of SQL.</p>\r\n\r\n<p>Using ORM has several advantages:</p>\r\n\r\n<p>1) Thanks to ORM, we have migrations: we can easily modify our tables, update our models, and Django will automatically generate the migration scripts needed to update the database tables.</p>\r\n\r\n<p>2) There are transactions: we can make multiple database updates within a transaction, and if something goes wrong, we can easily roll back to the state we had when we started it.</p>\r\n\r\n<p>But ORM also has some disadvantages:</p>\r\n\r\n<p>1) Since it is an abstraction on top of SQL, we do not always know exactly what SQL queries will be generated from our Python code.</p>\r\n\r\n<p>2) Django cannot guess when we need to use a related table, so it will not perform JOINs for us when we need them.</p>\r\n\r\n<p>3) ORM gives us a false sense of ease, and we don&#39;t always understand what we&#39;re doing, which can create a lot of load on the server. We have no easy way to know that accessing an attribute in an object might cause an extra query to the database that could have been prevented by a JOIN.</p>	<p>Django ORM (Object Relational Mapping) &ndash; одна из самых мощных функций Django. Благодаря ей мы можем взаимодействовать с базой данных, используя код Python вместо SQL.</p>\r\n\r\n<p>Использование ORM дает несколько преимуществ:</p>\r\n\r\n<p>1) Благодаря ORM у нас есть миграция: мы можем легко изменять наши таблицы, обновлять наши модели, и Django автоматически сгенерирует сценарии миграции, необходимый для обновления таблиц базы данных.</p>\r\n\r\n<p>2) Есть транзакции: мы можем делать несколько обновлений базы данных в рамках транзакции и, если что-то не получится, легко откатиться до того состояния, которое было при запуске.</p>\r\n\r\n<p>Но также у ORM есть некоторые недостатки:</p>\r\n\r\n<p>1) Поскольку это абстракция поверх SQL, то мы не всегда знаем точно, какие SQL-запросы будут генерироваться из нашего кода Python.</p>\r\n\r\n<p>2) Django не может угадать, когда нам нужно использовать связанную таблицу, поэтому она не будет выполнять JOINs для нас, когда они нам нужны.</p>\r\n\r\n<p>3) ORM дает нам неверное ощущение легкости, и мы не всегда понимаем то, что мы делаем, что может создавать большую нагрузку на сервер. У нас нет простого способа узнать, что доступ к атрибуту в объекте может вызвать дополнительный запрос к базе данных, который можно было бы предотвратить с помощью JOIN.</p>	Django ORM	Django ORM
1	История появления эмодзи	istoriya-poyavleniya-emod	<p>Еще лет 5-10 назад люди слабо представляли или вообще не знали, что такое эмодзи и как их использовать. А сейчас эти значки стали чуть ли не еще одним способом общения, отдельным языком, состоящим из картинок. Люди в социальных сетях активно вставляют эмодзи в свои сообщения, а компании используют эмодзи в рекламе.&nbsp;Но даже сейчас немногие знают, как и когда появились эмодзи.</p>\r\n\r\n<p>Необычное слово &laquo;эмодзи&raquo; (или на английском &ldquo;emoji&rdquo;) пришло в нашу речь из японского языка: 絵文字, где 絵 &mdash; картинка и 文字 &mdash; знак, символ. Несложно догадаться, что они были придуманы именно в Японии. Произошло это в 1999 году: Сигэтака Курита (Shigetaka Kurita) работал над платформой мобильного интернета i-mode и придумал символы эмодзи для того, чтобы упростить общение на сотовых телефонах. Первые эмодзи - это комплект из чуть больше 170 символов, каждый из которых помещался в клетку 12 на 12 пикселей. Естественно, они существенно отличались от тех, к которым мы сейчас привыкли.</p>	posts/Emoji-Meanings.png	2025-06-22 14:45:56.499587+04	2025-06-22 14:45:56.500026+04	2025-06-22 14:51:32.657969+04	f	2	2	3	<p>Just 5-10 years ago, people had little or no idea what emoji were and how to use them. And now these icons have become almost another way of communication, a separate language consisting of pictures. People on social networks actively insert emoji into their messages, and companies use emoji in advertising. But even now, few people know how and when emoji appeared.</p>\r\n\r\n<p>The unusual word &ldquo;emoji&rdquo; (or &ldquo;emoji&rdquo; in English) came into our speech from the Japanese language: 絵文字, where 絵 is a picture and 文字 is a sign, symbol. It is easy to guess that they were invented in Japan. This happened in 1999: Shigetaka Kurita worked on the i-mode mobile Internet platform and came up with emoji symbols to simplify communication on cell phones. The first emoji were a set of just over 170 symbols, each of which fit into a 12 x 12 pixel cell. Naturally, they were significantly different from those we are now accustomed to.</p>	<p>Еще лет 5-10 назад люди слабо представляли или вообще не знали, что такое эмодзи и как их использовать. А сейчас эти значки стали чуть ли не еще одним способом общения, отдельным языком, состоящим из картинок. Люди в социальных сетях активно вставляют эмодзи в свои сообщения, а компании используют эмодзи в рекламе.&nbsp;Но даже сейчас немногие знают, как и когда появились эмодзи.</p>\r\n\r\n<p>Необычное слово &laquo;эмодзи&raquo; (или на английском &ldquo;emoji&rdquo;) пришло в нашу речь из японского языка: 絵文字, где 絵 &mdash; картинка и 文字 &mdash; знак, символ. Несложно догадаться, что они были придуманы именно в Японии. Произошло это в 1999 году: Сигэтака Курита (Shigetaka Kurita) работал над платформой мобильного интернета i-mode и придумал символы эмодзи для того, чтобы упростить общение на сотовых телефонах. Первые эмодзи - это комплект из чуть больше 170 символов, каждый из которых помещался в клетку 12 на 12 пикселей. Естественно, они существенно отличались от тех, к которым мы сейчас привыкли.</p>	History of Emoji	История появления эмодзи
5	Первый тестовый пост	pervyj-testovyj-post	<p>В своём стремлении улучшить пользовательский опыт мы упускаем, что реплицированные с зарубежных источников, современные исследования рассмотрены исключительно в разрезе маркетинговых и финансовых предпосылок. Учитывая ключевые сценарии поведения, базовый вектор развития является качественно новой ступенью направлений прогрессивного развития. Но синтетическое тестирование в значительной степени обусловливает важность новых принципов формирования материально-технической и кадровой базы.</p>	posts/road-sign-361513_960_720.jpg	2025-06-22 14:45:56.515886+04	2025-06-22 14:45:56.5162+04	2025-06-22 14:48:02.403831+04	f	1	\N	1	<p>In our desire to improve user experience, we miss that modern studies replicated from foreign sources are considered exclusively in the context of marketing and financial prerequisites. Taking into account key behavior scenarios, the basic development vector is a qualitatively new stage in the directions of progressive development. But synthetic testing largely determines the importance of new principles for the formation of the material and technical and personnel base.</p>	<p>В своём стремлении улучшить пользовательский опыт мы упускаем, что реплицированные с зарубежных источников, современные исследования рассмотрены исключительно в разрезе маркетинговых и финансовых предпосылок. Учитывая ключевые сценарии поведения, базовый вектор развития является качественно новой ступенью направлений прогрессивного развития. Но синтетическое тестирование в значительной степени обусловливает важность новых принципов формирования материально-технической и кадровой базы.</p>	First test post	Первый тестовый пост
4	Коты - это жидкость	koty-eto-zhidkost	<p>Миллионы фотографий в интернете подтверждают, что коты &mdash; это жидкость. Но анатомический атлас упорно говорит, что внутри этих комков шерсти всё же есть кости и мышцы &mdash; как у любой животины. Так каким же образом усатым удаётся впихнуть невпихуемое и пролезть буквально сквозь игольное ушко? Говорят: если в отверстие пролезет кошачья голова, значит и обладатель её тоже поместится. Хотя дело тут не совсем в мордахе, а скорее в том, что на ней растёт. Усы-вибриссы служат котику подобием измерительного прибора, с помощью которого шерстяной лучше осознаёт масштабы пространства и оценивает свои способности. Но способности эти превеликие!</p>	posts/00134_wq2z-zC0oGs.jpg	2025-06-22 14:45:56.513094+04	2025-06-22 14:45:56.513456+04	2025-06-22 14:49:18.211477+04	f	1	1	2	<p>Millions of photos on the Internet confirm that cats are liquid. But the anatomical atlas stubbornly says that inside these lumps of fur there are still bones and muscles - like any animal. So how do whiskered ones manage to squeeze in the unsqueezable and literally crawl through the eye of a needle? They say: if a cat&#39;s head fits through the hole, then its owner will fit too. Although the point here is not exactly in the muzzle, but rather in what grows on it. The whiskers-vibrissae serve the cat as a kind of measuring device, with the help of which the furry one better understands the scale of space and evaluates his abilities. But these abilities are great!</p>	<p>Миллионы фотографий в интернете подтверждают, что коты &mdash; это жидкость. Но анатомический атлас упорно говорит, что внутри этих комков шерсти всё же есть кости и мышцы &mdash; как у любой животины. Так каким же образом усатым удаётся впихнуть невпихуемое и пролезть буквально сквозь игольное ушко? Говорят: если в отверстие пролезет кошачья голова, значит и обладатель её тоже поместится. Хотя дело тут не совсем в мордахе, а скорее в том, что на ней растёт. Усы-вибриссы служат котику подобием измерительного прибора, с помощью которого шерстяной лучше осознаёт масштабы пространства и оценивает свои способности. Но способности эти превеликие!</p>	Cats - its liquid	Коты - это жидкость
\.


--
-- TOC entry 3632 (class 0 OID 16873)
-- Dependencies: 246
-- Data for Name: blog_rating; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.blog_rating (id, ip, mark_id, post_id) FROM stdin;
\.


--
-- TOC entry 3630 (class 0 OID 16865)
-- Dependencies: 244
-- Data for Name: blog_video; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.blog_video (id, title, description, file, create_at, description_en, description_ru, title_en, title_ru) FROM stdin;
4	Киберспорт	cs	video/короткое_видео__по_кс_1.6.mp4	2025-06-22 14:28:36.018443+04	\N	cs	\N	Киберспорт
2	Мем - это эволюция эмодзи	Мем - это эволюция эмодзи.	video/Funny_video_Ha_Ha___GIF_IN_EMOJI_____GIN___viral_short.mp4	2025-06-22 14:28:36.021554+04	\N	Мем - это эволюция эмодзи.	\N	Мем - это эволюция эмодзи
1	Коты - это жидкость	Жидкий котёнок.	video/videoplayback.mp4	2025-06-22 14:28:36.023894+04	\N	Жидкий котёнок.	\N	Коты - это жидкость
\.


--
-- TOC entry 3636 (class 0 OID 16933)
-- Dependencies: 250
-- Data for Name: company_about; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.company_about (id, description, email_contact, phone1_num, phone2_num, address, latitude, longitude, description_en, description_ru) FROM stdin;
1	<p>Данный проект - первое полноценное веб-приложение, самостоятельно написанное мною с нуля.</p>	contact@gmail.com	+79999999999	+79999999998	Театральная площадь, 9, Саратов, Саратовская обл., 410042	51.532065	46.032558	<p>This project is the first full-fledged web application that I wrote myself from scratch.</p>	<p>Данный проект - первое полноценное веб-приложение, самостоятельно написанное мною с нуля.</p>
\.


--
-- TOC entry 3638 (class 0 OID 16941)
-- Dependencies: 252
-- Data for Name: company_contact; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.company_contact (id, name, email, phone, message, date, feedback) FROM stdin;
\.


--
-- TOC entry 3618 (class 0 OID 16784)
-- Dependencies: 232
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2025-06-22 13:44:58.424855+04	1	Автор	2	[{"changed": {"fields": ["Permissions"]}}]	3	1
2	2025-06-22 13:45:35.918636+04	2	Модератор	2	[{"changed": {"fields": ["Permissions"]}}]	3	1
3	2025-06-22 13:52:28.626413+04	2	Maximus	1	[{"added": {}}]	16	1
4	2025-06-22 13:57:09.443647+04	2	Maximus	2	[{"changed": {"fields": ["First name", "Last name", "\\u0414\\u0430\\u0442\\u0430 \\u0440\\u043e\\u0436\\u0434\\u0435\\u043d\\u0438\\u044f", "\\u0418\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\\u0446\\u0438\\u044f \\u043e\\u0431 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u0435 [ru]", "\\u0418\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\\u0446\\u0438\\u044f \\u043e\\u0431 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u0435 [en]", "\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044f", "Groups"]}}]	16	1
5	2025-06-22 13:58:03.836498+04	1	The Creator	2	[{"changed": {"fields": ["First name", "Last name", "\\u0414\\u0430\\u0442\\u0430 \\u0440\\u043e\\u0436\\u0434\\u0435\\u043d\\u0438\\u044f", "\\u0418\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\\u0446\\u0438\\u044f \\u043e\\u0431 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u0435 [ru]", "\\u0418\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\\u0446\\u0438\\u044f \\u043e\\u0431 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u0435 [en]", "\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044f", "Groups"]}}]	16	1
6	2025-06-22 13:59:22.902882+04	3	Platon	1	[{"added": {}}]	16	1
7	2025-06-22 14:00:00.329583+04	3	Platon	2	[{"changed": {"fields": ["\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044f", "Groups"]}}]	16	1
8	2025-06-22 14:25:49.461737+04	1	Страница "О нас" с контактной информацией	2	[{"changed": {"fields": ["\\u041e\\u0441\\u043d\\u043e\\u0432\\u043d\\u043e\\u0439 \\u0442\\u0435\\u043a\\u0441\\u0442\\u043e\\u0432\\u044b\\u0439 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442 \\u0441\\u0442\\u0440\\u0430\\u043d\\u0438\\u0446\\u044b [ru]:", "\\u041e\\u0441\\u043d\\u043e\\u0432\\u043d\\u043e\\u0439 \\u0442\\u0435\\u043a\\u0441\\u0442\\u043e\\u0432\\u044b\\u0439 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442 \\u0441\\u0442\\u0440\\u0430\\u043d\\u0438\\u0446\\u044b [en]:", "\\u042d\\u043b. \\u043f\\u043e\\u0447\\u0442\\u0430 \\u0434\\u043b\\u044f \\u043a\\u043e\\u043d\\u0442\\u0430\\u043a\\u0442\\u0430", "\\u041c\\u043e\\u0431\\u0438\\u043b\\u044c\\u043d\\u044b\\u0439 \\u0442\\u0435\\u043b\\u0435\\u0444\\u043e\\u043d", "\\u0421\\u0442\\u0430\\u0446\\u0438\\u043e\\u043d\\u0430\\u0440\\u043d\\u044b\\u0439 \\u0442\\u0435\\u043b\\u0435\\u0444\\u043e\\u043d", "\\u0410\\u0434\\u0440\\u0435\\u0441 \\u043a\\u043e\\u043c\\u043f\\u0430\\u043d\\u0438\\u0438", "\\u041a\\u043e\\u043e\\u0440\\u0434\\u0438\\u043d\\u0430\\u0442\\u0430 \\u0448\\u0438\\u0440\\u043e\\u0442\\u044b", "\\u041a\\u043e\\u043e\\u0440\\u0434\\u0438\\u043d\\u0430\\u0442\\u0430 \\u0434\\u043e\\u043b\\u0433\\u043e\\u0442\\u044b"]}}]	14	1
9	2025-06-22 14:48:02.432457+04	5	Первый тестовый пост	2	[{"changed": {"fields": ["\\u0417\\u0430\\u0433\\u043e\\u043b\\u043e\\u0432\\u043e\\u043a [en]", "\\u0421\\u043e\\u0434\\u0435\\u0440\\u0436\\u0430\\u043d\\u0438\\u0435 [en]:", "\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435", "Tags"]}}]	10	1
10	2025-06-22 14:49:02.415749+04	4	Коты - это жидкость	2	[{"changed": {"fields": ["\\u0417\\u0430\\u0433\\u043e\\u043b\\u043e\\u0432\\u043e\\u043a [en]", "\\u0410\\u0432\\u0442\\u043e\\u0440", "\\u0421\\u043e\\u0434\\u0435\\u0440\\u0436\\u0430\\u043d\\u0438\\u0435 [en]:", "\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435", "\\u0412\\u0438\\u0434\\u0435\\u043e \\u043a \\u0437\\u0430\\u043f\\u0438\\u0441\\u0438", "Tags"]}}]	10	1
11	2025-06-22 14:49:18.222752+04	4	Коты - это жидкость	2	[{"changed": {"fields": ["\\u0410\\u0432\\u0442\\u043e\\u0440"]}}]	10	1
12	2025-06-22 14:49:56.318333+04	3	Вред фастфуда	2	[{"changed": {"fields": ["\\u0417\\u0430\\u0433\\u043e\\u043b\\u043e\\u0432\\u043e\\u043a [en]", "\\u0410\\u0432\\u0442\\u043e\\u0440", "\\u0421\\u043e\\u0434\\u0435\\u0440\\u0436\\u0430\\u043d\\u0438\\u0435 [en]:", "\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435", "Tags"]}}]	10	1
13	2025-06-22 14:50:58.968983+04	2	Django ORM	2	[{"changed": {"fields": ["\\u0417\\u0430\\u0433\\u043e\\u043b\\u043e\\u0432\\u043e\\u043a [en]", "\\u0410\\u0432\\u0442\\u043e\\u0440", "\\u0421\\u043e\\u0434\\u0435\\u0440\\u0436\\u0430\\u043d\\u0438\\u0435 [en]:", "\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435", "Tags"]}}]	10	1
14	2025-06-22 14:51:32.691575+04	1	История появления эмодзи	2	[{"changed": {"fields": ["\\u0417\\u0430\\u0433\\u043e\\u043b\\u043e\\u0432\\u043e\\u043a [en]", "\\u0410\\u0432\\u0442\\u043e\\u0440", "\\u0421\\u043e\\u0434\\u0435\\u0440\\u0436\\u0430\\u043d\\u0438\\u0435 [en]:", "\\u0418\\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u0435", "\\u0412\\u0438\\u0434\\u0435\\u043e \\u043a \\u0437\\u0430\\u043f\\u0438\\u0441\\u0438", "Tags"]}}]	10	1
15	2025-06-22 14:52:44.370959+04	1	Комментарий от Maximus к Первый тестовый пост	1	[{"added": {}}]	13	1
16	2025-06-22 14:53:41.886891+04	2	Комментарий от The Creator к Вред фастфуда	1	[{"added": {}}]	13	1
17	2025-07-01 12:14:36.282714+04	6	TEST111	1	[{"added": {}}]	10	1
18	2025-07-01 12:40:11.120449+04	6	TEST111	3		10	1
19	2025-07-01 12:40:36.033624+04	7	TEST111	1	[{"added": {}}]	10	1
20	2025-07-01 16:11:15.796006+04	7	TEST111	3		10	1
21	2025-07-01 16:11:48.090509+04	8	TEST2	1	[{"added": {}}]	10	1
22	2025-07-01 16:31:06.94695+04	8	TEST2	3		10	1
23	2025-07-01 16:31:42.518045+04	9	test5	1	[{"added": {}}]	10	1
24	2025-07-04 13:30:42.577674+04	9	test5	3		10	1
25	2025-07-04 13:31:29.901912+04	9	test5	3		10	1
26	2025-07-04 13:32:34.277361+04	2	Maximus	2	[{"changed": {"fields": ["Groups"]}}]	16	1
27	2025-07-04 13:32:44.32297+04	2	Maximus	2	[{"changed": {"fields": ["Groups"]}}]	16	1
\.


--
-- TOC entry 3604 (class 0 OID 16679)
-- Dependencies: 218
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	contenttypes	contenttype
5	sessions	session
6	taggit	tag
7	taggit	taggeditem
8	blog	category
9	blog	mark
10	blog	post
11	blog	video
12	blog	rating
13	blog	comment
14	company	about
15	company	contact
16	users	user
\.


--
-- TOC entry 3602 (class 0 OID 16671)
-- Dependencies: 216
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2025-06-22 13:33:37.336115+04
2	contenttypes	0002_remove_content_type_name	2025-06-22 13:33:37.345552+04
3	auth	0001_initial	2025-06-22 13:33:37.393075+04
4	auth	0002_alter_permission_name_max_length	2025-06-22 13:33:37.403773+04
5	auth	0003_alter_user_email_max_length	2025-06-22 13:33:37.414518+04
6	auth	0004_alter_user_username_opts	2025-06-22 13:33:37.42443+04
7	auth	0005_alter_user_last_login_null	2025-06-22 13:33:37.430215+04
8	auth	0006_require_contenttypes_0002	2025-06-22 13:33:37.43313+04
9	auth	0007_alter_validators_add_error_messages	2025-06-22 13:33:37.439297+04
10	auth	0008_alter_user_username_max_length	2025-06-22 13:33:37.445632+04
11	auth	0009_alter_user_last_name_max_length	2025-06-22 13:33:37.452439+04
12	auth	0010_alter_group_name_max_length	2025-06-22 13:33:37.459629+04
13	auth	0011_update_proxy_permissions	2025-06-22 13:33:37.469042+04
14	auth	0012_alter_user_first_name_max_length	2025-06-22 13:33:37.476338+04
15	users	0001_initial	2025-06-22 13:33:37.517146+04
16	admin	0001_initial	2025-06-22 13:33:37.54975+04
17	admin	0002_logentry_remove_auto_add	2025-06-22 13:33:37.566828+04
18	admin	0003_logentry_add_action_flag_choices	2025-06-22 13:33:37.584818+04
19	taggit	0001_initial	2025-06-22 13:33:37.617083+04
20	taggit	0002_auto_20150616_2121	2025-06-22 13:33:37.628625+04
21	taggit	0003_taggeditem_add_unique_index	2025-06-22 13:33:37.644255+04
22	taggit	0004_alter_taggeditem_content_type_alter_taggeditem_tag	2025-06-22 13:33:37.660724+04
23	taggit	0005_auto_20220424_2025	2025-06-22 13:33:37.666294+04
24	blog	0001_initial	2025-06-22 13:33:37.770028+04
25	blog	0002_alter_post_options_alter_comment_parent_and_more	2025-06-22 13:33:37.811004+04
26	blog	0003_post_author_alter_post_publish	2025-06-22 13:33:37.839541+04
27	blog	0004_alter_post_author	2025-06-22 13:33:37.853822+04
28	blog	0005_category_description_en_category_description_ru_and_more	2025-06-22 13:33:37.920382+04
29	company	0001_initial	2025-06-22 13:33:37.928157+04
30	company	0002_contact	2025-06-22 13:33:37.936402+04
31	company	0003_about_description_en_about_description_ru	2025-06-22 13:33:37.943442+04
32	sessions	0001_initial	2025-06-22 13:33:37.956243+04
33	users	0002_auto_20241109_1707	2025-06-22 13:33:37.972937+04
34	users	0003_alter_user_options_user_birthday_user_description_and_more	2025-06-22 13:33:38.158412+04
35	users	0004_remove_user_total_likes_user_user_rating	2025-06-22 13:33:38.177341+04
36	users	0005_user_description_en_user_description_ru	2025-06-22 13:33:38.193862+04
\.


--
-- TOC entry 3639 (class 0 OID 16948)
-- Dependencies: 253
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
ibf5v809kdu0da68sb1viimyxbdnkr8j	.eJxVjDsOwjAQBe_iGllZe_2jpM8ZrPUPB5AjxUmFuDuJlALaNzPvzTxta_Vbz4ufErsyYJffLVB85naA9KB2n3mc27pMgR8KP2nn45zy63a6fweVet1rp7XI5AYoSku0CcGogEJa7UzJCVHJaJ2wgyiANjiDQGSkkhhA7yr7fAGpDjY6:1uTHF4:QENoshDe8oKh96y5wrEjItH0LBHoCKhlClHgy66VuLc	2025-07-06 13:44:02.799409+04
y733z0d07cv47heppi1r5wvdhg5mog0g	.eJxVjDsOwjAQBe_iGllZe_2jpM8ZrPUPB5AjxUmFuDuJlALaNzPvzTxta_Vbz4ufErsyYJffLVB85naA9KB2n3mc27pMgR8KP2nn45zy63a6fweVet1rp7XI5AYoSku0CcGogEJa7UzJCVHJaJ2wgyiANjiDQGSkkhhA7yr7fAGpDjY6:1uXcji:vlBuRI7rXdaJ-WLWHwh_Q_laOcdc4V3GA94jFq_Xxx0	2025-07-18 13:29:38.342973+04
\.


--
-- TOC entry 3620 (class 0 OID 16805)
-- Dependencies: 234
-- Data for Name: taggit_tag; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.taggit_tag (id, name, slug) FROM stdin;
1	testing	testing
2	programming	programming
3	animals	animals
4	cats	cats
5	facts	facts
6	health	health
7	django	django
8	Japan	japan
9	emoji	emoji
\.


--
-- TOC entry 3622 (class 0 OID 16815)
-- Dependencies: 236
-- Data for Name: taggit_taggeditem; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.taggit_taggeditem (id, object_id, content_type_id, tag_id) FROM stdin;
1	5	10	1
2	5	10	2
3	4	10	3
4	4	10	4
5	3	10	5
6	3	10	6
7	2	10	2
8	2	10	7
9	1	10	8
10	1	10	9
11	1	10	5
\.


--
-- TOC entry 3612 (class 0 OID 16733)
-- Dependencies: 226
-- Data for Name: users_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined, birthday, description, image, user_rating, description_en, description_ru) FROM stdin;
2	pbkdf2_sha256$600000$vZ7bdZyK7mGa2TwDeo9FLR$W6+1l5kaOuR76RsdSMSrh/8gMB6Qvlw/XXjYcrgnPIc=	\N	f	Maximus	Максимус	Программиус	maximus@mail.com	t	t	2025-06-22 13:52:28.317875+04	2000-02-20	Увлекаюсь веб-разработкой. Поддерживаю здоровый образ жизни и хорошее настроение.	users/photo_2023-07-04_19-12-16.jpg	0	I'm interested in web development. I maintain a healthy lifestyle and good mood.	Увлекаюсь веб-разработкой. Поддерживаю здоровый образ жизни и хорошее настроение.
3	pbkdf2_sha256$600000$FF0RuOPpdewoLbHFcrQH4P$INaLA0vDjiGg7zCu41fPJHvDdYG8om3YKFKdhqWaOnY=	\N	f	Platon			platon@mail.com	t	t	2025-06-22 13:59:22.64634+04	\N		users/scale_1200.webp	0		
1	pbkdf2_sha256$600000$Dl4Hy7Vb7Ff0u0gU7zRl5E$Sw0VLXJx6BplvIjsqqzPSYEsnW2jlV/5ZRK4bDgL3Ws=	2025-07-04 13:29:38.284076+04	t	The Creator	Иисус	Христос	thecreator@mail.com	t	t	2025-06-22 13:43:23.101818+04	0001-01-01	Администратор сайта – специалист, который ведет веб-ресурс в интернете, обеспечивает его бесперебойное функционирование, отвечает за наполняемость и безопасность. Специалист поддерживает подведомственный ему сайт в порядке, обновляет информацию на страницах.	users/1398010924_1719138212_fDLcU1y.jpg	0	"A site administrator is a specialist who manages a web resource on the Internet, ensures its uninterrupted functioning, and is responsible for its content and security. The specialist maintains the website under his supervision in order and updates the information on the pages."	Администратор сайта – специалист, который ведет веб-ресурс в интернете, обеспечивает его бесперебойное функционирование, отвечает за наполняемость и безопасность. Специалист поддерживает подведомственный ему сайт в порядке, обновляет информацию на страницах.
\.


--
-- TOC entry 3614 (class 0 OID 16743)
-- Dependencies: 228
-- Data for Name: users_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users_user_groups (id, user_id, group_id) FROM stdin;
1	2	2
2	1	1
3	1	2
4	3	1
\.


--
-- TOC entry 3616 (class 0 OID 16749)
-- Dependencies: 230
-- Data for Name: users_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- TOC entry 3645 (class 0 OID 0)
-- Dependencies: 221
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 2, true);


--
-- TOC entry 3646 (class 0 OID 0)
-- Dependencies: 223
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 51, true);


--
-- TOC entry 3647 (class 0 OID 0)
-- Dependencies: 219
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 64, true);


--
-- TOC entry 3648 (class 0 OID 0)
-- Dependencies: 227
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 5, true);


--
-- TOC entry 3649 (class 0 OID 0)
-- Dependencies: 225
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 3, true);


--
-- TOC entry 3650 (class 0 OID 0)
-- Dependencies: 229
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- TOC entry 3651 (class 0 OID 0)
-- Dependencies: 237
-- Name: blog_category_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.blog_category_id_seq', 1, false);


--
-- TOC entry 3652 (class 0 OID 0)
-- Dependencies: 247
-- Name: blog_comment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.blog_comment_id_seq', 2, true);


--
-- TOC entry 3653 (class 0 OID 0)
-- Dependencies: 239
-- Name: blog_mark_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.blog_mark_id_seq', 1, false);


--
-- TOC entry 3654 (class 0 OID 0)
-- Dependencies: 241
-- Name: blog_post_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.blog_post_id_seq', 9, true);


--
-- TOC entry 3655 (class 0 OID 0)
-- Dependencies: 245
-- Name: blog_rating_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.blog_rating_id_seq', 2, true);


--
-- TOC entry 3656 (class 0 OID 0)
-- Dependencies: 243
-- Name: blog_video_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.blog_video_id_seq', 1, false);


--
-- TOC entry 3657 (class 0 OID 0)
-- Dependencies: 249
-- Name: company_about_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.company_about_id_seq', 1, true);


--
-- TOC entry 3658 (class 0 OID 0)
-- Dependencies: 251
-- Name: company_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.company_contact_id_seq', 1, false);


--
-- TOC entry 3659 (class 0 OID 0)
-- Dependencies: 231
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 27, true);


--
-- TOC entry 3660 (class 0 OID 0)
-- Dependencies: 217
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 16, true);


--
-- TOC entry 3661 (class 0 OID 0)
-- Dependencies: 215
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 36, true);


--
-- TOC entry 3662 (class 0 OID 0)
-- Dependencies: 233
-- Name: taggit_tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.taggit_tag_id_seq', 9, true);


--
-- TOC entry 3663 (class 0 OID 0)
-- Dependencies: 235
-- Name: taggit_taggeditem_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.taggit_taggeditem_id_seq', 15, true);


--
-- TOC entry 3359 (class 2606 OID 16730)
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- TOC entry 3364 (class 2606 OID 16716)
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- TOC entry 3367 (class 2606 OID 16705)
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- TOC entry 3361 (class 2606 OID 16697)
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- TOC entry 3354 (class 2606 OID 16707)
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- TOC entry 3356 (class 2606 OID 16691)
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- TOC entry 3375 (class 2606 OID 16747)
-- Name: users_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 3378 (class 2606 OID 16973)
-- Name: users_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- TOC entry 3369 (class 2606 OID 16962)
-- Name: users_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- TOC entry 3381 (class 2606 OID 16753)
-- Name: users_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- TOC entry 3384 (class 2606 OID 16983)
-- Name: users_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- TOC entry 3372 (class 2606 OID 16741)
-- Name: users_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- TOC entry 3406 (class 2606 OID 16845)
-- Name: blog_category blog_category_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_category
    ADD CONSTRAINT blog_category_pkey PRIMARY KEY (id);


--
-- TOC entry 3409 (class 2606 OID 16847)
-- Name: blog_category blog_category_url_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_category
    ADD CONSTRAINT blog_category_url_key UNIQUE (url);


--
-- TOC entry 3430 (class 2606 OID 16892)
-- Name: blog_comment blog_comment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_comment
    ADD CONSTRAINT blog_comment_pkey PRIMARY KEY (id);


--
-- TOC entry 3411 (class 2606 OID 16853)
-- Name: blog_mark blog_mark_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_mark
    ADD CONSTRAINT blog_mark_pkey PRIMARY KEY (id);


--
-- TOC entry 3415 (class 2606 OID 16861)
-- Name: blog_post blog_post_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_post
    ADD CONSTRAINT blog_post_pkey PRIMARY KEY (id);


--
-- TOC entry 3418 (class 2606 OID 16863)
-- Name: blog_post blog_post_url_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_post
    ADD CONSTRAINT blog_post_url_key UNIQUE (url);


--
-- TOC entry 3420 (class 2606 OID 16879)
-- Name: blog_post blog_post_video_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_post
    ADD CONSTRAINT blog_post_video_id_key UNIQUE (video_id);


--
-- TOC entry 3426 (class 2606 OID 16877)
-- Name: blog_rating blog_rating_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_rating
    ADD CONSTRAINT blog_rating_pkey PRIMARY KEY (id);


--
-- TOC entry 3423 (class 2606 OID 16871)
-- Name: blog_video blog_video_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_video
    ADD CONSTRAINT blog_video_pkey PRIMARY KEY (id);


--
-- TOC entry 3433 (class 2606 OID 16939)
-- Name: company_about company_about_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.company_about
    ADD CONSTRAINT company_about_pkey PRIMARY KEY (id);


--
-- TOC entry 3435 (class 2606 OID 16947)
-- Name: company_contact company_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.company_contact
    ADD CONSTRAINT company_contact_pkey PRIMARY KEY (id);


--
-- TOC entry 3387 (class 2606 OID 16791)
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- TOC entry 3349 (class 2606 OID 16685)
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- TOC entry 3351 (class 2606 OID 16683)
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- TOC entry 3347 (class 2606 OID 16677)
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- TOC entry 3438 (class 2606 OID 16954)
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- TOC entry 3391 (class 2606 OID 16811)
-- Name: taggit_tag taggit_tag_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.taggit_tag
    ADD CONSTRAINT taggit_tag_name_key UNIQUE (name);


--
-- TOC entry 3393 (class 2606 OID 16809)
-- Name: taggit_tag taggit_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.taggit_tag
    ADD CONSTRAINT taggit_tag_pkey PRIMARY KEY (id);


--
-- TOC entry 3396 (class 2606 OID 16813)
-- Name: taggit_tag taggit_tag_slug_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.taggit_tag
    ADD CONSTRAINT taggit_tag_slug_key UNIQUE (slug);


--
-- TOC entry 3399 (class 2606 OID 16837)
-- Name: taggit_taggeditem taggit_taggeditem_content_type_id_object_i_4bb97a8e_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_content_type_id_object_i_4bb97a8e_uniq UNIQUE (content_type_id, object_id, tag_id);


--
-- TOC entry 3403 (class 2606 OID 16819)
-- Name: taggit_taggeditem taggit_taggeditem_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_pkey PRIMARY KEY (id);


--
-- TOC entry 3357 (class 1259 OID 16731)
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- TOC entry 3362 (class 1259 OID 16727)
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- TOC entry 3365 (class 1259 OID 16728)
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- TOC entry 3352 (class 1259 OID 16713)
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- TOC entry 3373 (class 1259 OID 16768)
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.users_user_groups USING btree (group_id);


--
-- TOC entry 3376 (class 1259 OID 16974)
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.users_user_groups USING btree (user_id);


--
-- TOC entry 3379 (class 1259 OID 16782)
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.users_user_user_permissions USING btree (permission_id);


--
-- TOC entry 3382 (class 1259 OID 16984)
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.users_user_user_permissions USING btree (user_id);


--
-- TOC entry 3370 (class 1259 OID 16754)
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.users_user USING btree (username varchar_pattern_ops);


--
-- TOC entry 3407 (class 1259 OID 16893)
-- Name: blog_category_url_a23f4a52_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX blog_category_url_a23f4a52_like ON public.blog_category USING btree (url varchar_pattern_ops);


--
-- TOC entry 3428 (class 1259 OID 16923)
-- Name: blog_comment_parent_id_f2a027bb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX blog_comment_parent_id_f2a027bb ON public.blog_comment USING btree (parent_id);


--
-- TOC entry 3431 (class 1259 OID 16924)
-- Name: blog_comment_post_id_580e96ef; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX blog_comment_post_id_580e96ef ON public.blog_comment USING btree (post_id);


--
-- TOC entry 3412 (class 1259 OID 17001)
-- Name: blog_post_author_id_dd7a8485; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX blog_post_author_id_dd7a8485 ON public.blog_post USING btree (author_id);


--
-- TOC entry 3413 (class 1259 OID 16900)
-- Name: blog_post_category_id_c326dbf8; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX blog_post_category_id_c326dbf8 ON public.blog_post USING btree (category_id);


--
-- TOC entry 3416 (class 1259 OID 16899)
-- Name: blog_post_url_5af1045a_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX blog_post_url_5af1045a_like ON public.blog_post USING btree (url varchar_pattern_ops);


--
-- TOC entry 3424 (class 1259 OID 16911)
-- Name: blog_rating_mark_id_e22078b3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX blog_rating_mark_id_e22078b3 ON public.blog_rating USING btree (mark_id);


--
-- TOC entry 3427 (class 1259 OID 16912)
-- Name: blog_rating_post_id_1f796059; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX blog_rating_post_id_1f796059 ON public.blog_rating USING btree (post_id);


--
-- TOC entry 3385 (class 1259 OID 16802)
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- TOC entry 3388 (class 1259 OID 16992)
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- TOC entry 3436 (class 1259 OID 16956)
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- TOC entry 3439 (class 1259 OID 16955)
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- TOC entry 3421 (class 1259 OID 16925)
-- Name: publish_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX publish_id_idx ON public.blog_post USING btree (publish DESC, id DESC);


--
-- TOC entry 3389 (class 1259 OID 16820)
-- Name: taggit_tag_name_58eb2ed9_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX taggit_tag_name_58eb2ed9_like ON public.taggit_tag USING btree (name varchar_pattern_ops);


--
-- TOC entry 3394 (class 1259 OID 16821)
-- Name: taggit_tag_slug_6be58b2c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX taggit_tag_slug_6be58b2c_like ON public.taggit_tag USING btree (slug varchar_pattern_ops);


--
-- TOC entry 3397 (class 1259 OID 16833)
-- Name: taggit_taggeditem_content_type_id_9957a03c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX taggit_taggeditem_content_type_id_9957a03c ON public.taggit_taggeditem USING btree (content_type_id);


--
-- TOC entry 3400 (class 1259 OID 16835)
-- Name: taggit_taggeditem_content_type_id_object_id_196cc965_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX taggit_taggeditem_content_type_id_object_id_196cc965_idx ON public.taggit_taggeditem USING btree (content_type_id, object_id);


--
-- TOC entry 3401 (class 1259 OID 16832)
-- Name: taggit_taggeditem_object_id_e2d7d1df; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX taggit_taggeditem_object_id_e2d7d1df ON public.taggit_taggeditem USING btree (object_id);


--
-- TOC entry 3404 (class 1259 OID 16834)
-- Name: taggit_taggeditem_tag_id_f4f5b767; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX taggit_taggeditem_tag_id_f4f5b767 ON public.taggit_taggeditem USING btree (tag_id);


--
-- TOC entry 3441 (class 2606 OID 16722)
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3442 (class 2606 OID 16717)
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3440 (class 2606 OID 16708)
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3443 (class 2606 OID 16762)
-- Name: users_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3444 (class 2606 OID 17014)
-- Name: users_user_groups auth_user_groups_user_id_6a12ed8b_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk FOREIGN KEY (user_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3445 (class 2606 OID 16776)
-- Name: users_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3446 (class 2606 OID 17019)
-- Name: users_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk FOREIGN KEY (user_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3456 (class 2606 OID 16913)
-- Name: blog_comment blog_comment_parent_id_f2a027bb_fk_blog_comment_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_comment
    ADD CONSTRAINT blog_comment_parent_id_f2a027bb_fk_blog_comment_id FOREIGN KEY (parent_id) REFERENCES public.blog_comment(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3457 (class 2606 OID 16918)
-- Name: blog_comment blog_comment_post_id_580e96ef_fk_blog_post_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_comment
    ADD CONSTRAINT blog_comment_post_id_580e96ef_fk_blog_post_id FOREIGN KEY (post_id) REFERENCES public.blog_post(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3451 (class 2606 OID 17029)
-- Name: blog_post blog_post_author_id_dd7a8485_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_post
    ADD CONSTRAINT blog_post_author_id_dd7a8485_fk FOREIGN KEY (author_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3452 (class 2606 OID 16894)
-- Name: blog_post blog_post_category_id_c326dbf8_fk_blog_category_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_post
    ADD CONSTRAINT blog_post_category_id_c326dbf8_fk_blog_category_id FOREIGN KEY (category_id) REFERENCES public.blog_category(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3453 (class 2606 OID 16880)
-- Name: blog_post blog_post_video_id_22556410_fk_blog_video_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_post
    ADD CONSTRAINT blog_post_video_id_22556410_fk_blog_video_id FOREIGN KEY (video_id) REFERENCES public.blog_video(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3454 (class 2606 OID 16901)
-- Name: blog_rating blog_rating_mark_id_e22078b3_fk_blog_mark_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_rating
    ADD CONSTRAINT blog_rating_mark_id_e22078b3_fk_blog_mark_id FOREIGN KEY (mark_id) REFERENCES public.blog_mark(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3455 (class 2606 OID 16906)
-- Name: blog_rating blog_rating_post_id_1f796059_fk_blog_post_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_rating
    ADD CONSTRAINT blog_rating_post_id_1f796059_fk_blog_post_id FOREIGN KEY (post_id) REFERENCES public.blog_post(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3447 (class 2606 OID 16792)
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3448 (class 2606 OID 17024)
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk FOREIGN KEY (user_id) REFERENCES public.users_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3449 (class 2606 OID 16822)
-- Name: taggit_taggeditem taggit_taggeditem_content_type_id_9957a03c_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_content_type_id_9957a03c_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 3450 (class 2606 OID 16827)
-- Name: taggit_taggeditem taggit_taggeditem_tag_id_f4f5b767_fk_taggit_tag_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_tag_id_f4f5b767_fk_taggit_tag_id FOREIGN KEY (tag_id) REFERENCES public.taggit_tag(id) DEFERRABLE INITIALLY DEFERRED;


-- Completed on 2025-07-04 13:38:07 +04

--
-- PostgreSQL database dump complete
--

